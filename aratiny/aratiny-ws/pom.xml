<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>uk.ac.rothamsted.knetminer</groupId>
		<artifactId>aratiny</artifactId>
		<version>1.0.0-SNAPSHOT</version>
	</parent>

	<artifactId>aratiny-ws</artifactId>
	<packaging>war</packaging>

	<properties>
		<maven.profileId>default</maven.profileId>
		<knetminer.graphTraverserClass></knetminer.graphTraverserClass>
	</properties>

	<dependencies>
		<dependency>
			<groupId>uk.ac.rothamsted.knetminer.common</groupId>
			<artifactId>server-base</artifactId>
			<version>${project.version}</version>
			<type>war</type>
		</dependency>
		<dependency>
			<groupId>uk.ac.rothamsted.knetminer.common</groupId>
			<artifactId>configurable-datasource</artifactId>
			<version>${project.version}</version>
		</dependency>
		<dependency>
			<groupId>org.json</groupId>
			<artifactId>json</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>commons-io</groupId>
			<artifactId>commons-io</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.httpcomponents</groupId>
			<artifactId>httpclient</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-jcl</artifactId>
		</dependency>
		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-core</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<finalName>aratiny-ws</finalName>
		
		<plugins>
		
  		<plugin>
  			<artifactId>maven-dependency-plugin</artifactId>	  			
  			<executions>
  				<execution>
  					<phase>generate-test-resources</phase>
  					<goals><goal>unpack</goal></goals>
  				</execution>
  			</executions>
				<configuration>
        	<artifactItems>
        		<artifactItem>
							<groupId>uk.ac.rothamsted.knetminer.backend</groupId>
							<artifactId>test-data-server</artifactId>
							<version>1.0-SNAPSHOT</version>
							<includes>ara-tiny-neo4j.tar.bz2,ara-tiny.oxl</includes>
        		</artifactItem>
        	</artifactItems>  						
				</configuration>
  		</plugin>
		
			<plugin>
			  <groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
			</plugin>
				
			<plugin>
			  <groupId>org.eclipse.jetty</groupId>
			  <artifactId>jetty-maven-plugin</artifactId>
			  <executions>
			  	<execution>
			  		<id>start</id>
			  		<phase>pre-integration-test</phase>
			  		<goals><goal>start</goal></goals>
			  	</execution>
			  	<execution>
			  		<id>stop</id>
			  		<phase>post-integration-test</phase>
			  		<goals><goal>stop</goal></goals>
			  	</execution>
			  </executions>
			  <configuration>
	        <httpConnector>
	          <port>${knetminer.api.httpPort}</port>
	        </httpConnector>			    
			    <webApp>
			      <contextPath>/${knetminer.api.webContext}</contextPath>
            <overrideDescriptor>${project.build.testOutputDirectory}/jetty-web.xml</overrideDescriptor>
			    </webApp>
			    <stopPort>9091</stopPort>
			  </configuration>
			</plugin>		
		
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
	      <artifactId>maven-failsafe-plugin</artifactId>
	      <configuration combine.self = "merge">
	      	<systemProperties>
	      		<maven.profileId>${maven.profileId}</maven.profileId>
	      	</systemProperties>
	      </configuration>
			</plugin>			
		
		</plugins>
		
		<testResources>
			<!-- These files contains Maven variables that need to be interpolated -->
			<testResource>
			  <directory>src/test/resources</directory>
			  <filtering>true</filtering>
			  <includes>
			  	<include>knetminer-config/data-source.xml</include>
			  	<include>knetminer-config/neo4j/config.xml</include>
			  	<include>jetty-web.xml</include>
			  </includes>
			</testResource>
			<!-- And the rest doesn't -->
			<testResource>
			  <directory>src/test/resources</directory>
			  <filtering>false</filtering>
			  <excludes>
			  	<exclude>knetminer-config/data-source.xml</exclude>
			  	<exclude>knetminer-config/neo4j/config.xml</exclude>
			  	<exclude>jetty-web.xml</exclude>
			  </excludes>
			</testResource>		
   	</testResources>				
		
	</build>
	
	<profiles>
		
		<profile>
			<id>neo4j</id>
			<properties>
				<maven.profileId>neo4j</maven.profileId>
				<knetminer.graphTraverserClass>uk.ac.rothamsted.knetminer.backend.cypher.genesearch.CypherGraphTraverser</knetminer.graphTraverserClass>
			</properties>
			<build>
				<plugins>

					<!-- 
						Unzip neo4j test DB downloaded by the dependency plugin. 
						This happens after neo4j-server-maven-plugin below has downladed the 
						Neo4j distribution. 
					-->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-antrun-plugin</artifactId>
						<executions>
							<execution>
								<phase>process-test-resources</phase>
								<goals><goal>run</goal></goals>
								<configuration>
									<tasks>
										<untar 
											src = "${project.build.directory}/dependency/ara-tiny-neo4j.tar.bz2" 
											dest = "target/neo4j-server/neo4j-community-${neo4j.server.version}/data/databases"
											compression = "bzip2"
										/>
									</tasks>
								</configuration>
							</execution>
						</executions>
					</plugin>	
				
				  <!-- 
						A small plug-in that starts Neo4j. 
						
						1.1 is the official version that integrated our improvements at
						at https://github.com/Rothamsted/neo4j-server-maven-plugin 
				  -->		  
			    <plugin>
				    <groupId>com.github.harti2006</groupId>
					  <artifactId>neo4j-server-maven-plugin</artifactId>
						<version>1.1</version>
						<configuration>
							<version>${neo4j.server.version}</version>
							<port>${neo4j.server.httpPort}</port>
							<boltPort>${neo4j.server.boltPort}</boltPort>
							<serverReadyAttempts>120</serverReadyAttempts>
							<!-- We have our own DB, see above -->
							<deleteDb>false</deleteDb>					
						</configuration>
						<executions>
							<!-- Start/stop just to download it before the ant/untar task above -->
							<execution>
								<id>neo4j-server-download</id>
								<phase>generate-test-resources</phase>
								<goals>
									<goal>start</goal>
									<goal>stop</goal>
								</goals>
								<configuration><deleteDb>true</deleteDb></configuration>
							</execution>
							<!-- 
							  Regular start/stop, using the test DB downloaded by dependency plugin.
							  
							  Notes on the hooked phases: the only way to control plugin exec order, when they're
							  linked to the same phase, is to define them in the desired order in the POM. Unfortunately,
							  this is not possible when the plug-in that should go first (Neo4) is in a profile, while the
							  other (jetty) is in the main section. So, we use the (ugly) workaround of hooking neo4j to
							  weird phases.
							-->
							<execution>
								<id>start-neo4j-server</id>
								<phase>pre-integration-test</phase>
								<goals><goal>start</goal></goals>
							</execution>
							<execution>
								<id>stop-neo4j-server</id>
								<phase>post-integration-test</phase>
								<goals><goal>stop</goal></goals>
							</execution>					
						</executions>		        
			    </plugin>
			    
			    <!-- 
			    	It inherits stuff from the main section. We have to repeat it here, since it's the only way to
			    	force same-phase execution order when using profiles (both jetty and neo4j belong in pre/post integration 
			    	test phases, the former must be started (stopped) before (after) the latter).
			     -->
					<plugin>
					  <groupId>org.eclipse.jetty</groupId>
					  <artifactId>jetty-maven-plugin</artifactId>
					</plugin>			    

				</plugins>
			</build>		
		</profile>
		
		<!-- 
			This is used to run the build in 'console' mode, ie, start Neo4j (if the corresponding profile is enabled)
			and jetty and keep them on until the maven user presses Enter.
			
			There is a (pseudo) test in ApiIT to deal with that, which wait for a key if this profile is enabled (and the
			the maven.profileId is set to 'console'). The build finishes after that step with the usual server shutdowns.
		-->
		<profile>
			<id>console</id>
			<properties>
				<maven.profileId>console</maven.profileId>
			</properties>
		</profile>
				
	</profiles>

</project>